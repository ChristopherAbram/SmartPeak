version: 2.1

orbs:
  win: circleci/windows@2.4.0

jobs:
  build_windows:
    working_directory: ~/SmartPeak
    executor: win/default
    steps:
      - checkout
      - run: systeminfo
      - run: |
          cd ~
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $ProgressPreference = "SilentlyContinue"
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          choco install cmake --version=3.17.2 --installargs '"ADD_CMAKE_TO_PATH=System"'
          # choco install boost-msvc-14.1
          choco install doxygen.install
          choco install nsis.portable
          refreshenv
          $qt_url = 'https://github.com/martinrotter/qt5-minimalistic-builds/releases/download/5.12.9/qt-5.12.9-dynamic-msvc2019-x86_64.7z'
          $sdl2_url = 'https://www.libsdl.org/release/SDL2-devel-2.0.12-VC.zip'
          $boost_url = 'https://github.com/ahmedskhalil/Boost-1.73-Prebuilts/releases/download/0.0.1/boost_1_73_0.7z'
          $qt_tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'qt_tmp$', '7z' } –PassThru
          Invoke-WebRequest $qt_url -OutFile $qt_tmp 
          7z x $qt_tmp -o'C:\lib\Qt'
          cp C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\bin\Qt5Core.dll C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\lib\cmake\Qt5Core\
          cp C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\bin\Qt5Network.dll C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\lib\cmake\Qt5Network\
          cp C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\bin\libcrypto-1_1-x64.dll C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\lib\cmake\Qt5\
          cp C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\bin\libssl-1_1-x64.dll C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\lib\cmake\Qt5\
          $Qt_DIR = 'C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64'
          $qt_tmp | Remove-Item
          $sdl2_tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'sdl2_tmp$', 'zip' } –PassThru
          Invoke-WebRequest $sdl2_url -OutFile $sdl2_tmp 
          7z x $sdl2_tmp -o'C:\lib\sdl2'
          $SDL_DIR = 'C:\lib\sdl2\SDL2-2.0.12'
          $sdl2_tmp | Remove-Item
          $boost_tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'boost_tmp$', '7z' } –PassThru
          Invoke-WebRequest $boost_url -OutFile $boost_tmp 
          7z x $boost_tmp -o'C:\lib\boost'
          ls C:\lib\boost\boost_1_73_0
          ls C:\lib\boost\
          $BOOST_DIR = 'C:\lib\boost\boost_1_73_0'
          $boost_tmp | Remove-Item
      - run: |
          cd ~
          git clone --branch develop --depth 1 https://github.com/OpenMS/OpenMS.git
          cd ~/OpenMS
      - run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $ProgressPreference = "SilentlyContinue"
          cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars64.txt"
          Get-Content "$env:temp\vcvars64.txt" | Foreach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
              Set-Content "env:\$($matches[1])" $matches[2]
              }
          }
          cd ~/OpenMS
          mkdir contrib_build; cd contrib_build
          $url_contrib = 'https://abibuilder.informatik.uni-tuebingen.de/archive/openms/contrib/windows/x64/msvc-14.2/contrib_build.tar.gz'
          $contrib_tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'contrib_tmp$', 'tar.gz' } –PassThru
          Invoke-WebRequest $url_contrib -OutFile $contrib_tmp
          7z x $contrib_tmp -o'.'
          7z x $contrib_tmp.BaseName -o'.'
          rm  .\lib\libboost_*
          rm  -r .\include\boost
          cd ~/OpenMS; mkdir openms_build; cd openms_build
          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_CXX_EXTENSIONS=OFF -DCXX_STANDARD_REQUIRED=ON -DBoost_NO_SYSTEM_PATHS=ON -DBOOST_USE_STATIC=ON -DBOOST_ROOT="C:\lib\boost\boost_1_73_0" -DBOOST_INCLUDE_DIR="C:\lib\boost\boost_1_73_0" -DBOOST_LIBRARYDIR="C:\lib\boost\boost_1_73_0\lib64-msvc-14.2" -DOPENMS_CONTRIB_LIBS=~/OpenMS/contrib_build -DCMAKE_PREFIX_PATH="C:/lib/Qt/qt-5.12.9-dynamic-msvc2019-x86_64" -DHAS_XSERVER=OFF -DWITH_GUI=OFF -DENABLE_TUTORIALS=OFF -DENABLE_DOCS=OFF -DGIT_TRACKING=OFF -DENABLE_UPDATE_CHECK=OFF -DCMAKE_BUILD_TYPE=Release -DPYOPENMS=OFF -DOPENMS_COVERAGE=OFF ~/OpenMS
          msbuild src\openswathalgo\OpenSWATHAlgo.sln /maxcpucount /p:Configuration=Release
          msbuild src\openms\OpenMS.sln /maxcpucount /p:Configuration=Release
      - run: |
          Start-Process powershell -Verb runas
          [Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Users\circleci\OpenMS\openms_build\bin\Release;C:\lib\Qt\qt-5.12.9-dynamic-msvc2019-x86_64\bin", [EnvironmentVariableTarget]::Machine)
          refreshenv
      - run: |
          Get-Content "$env:temp\vcvars64.txt" | Foreach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
              Set-Content "env:\$($matches[1])" $matches[2]
              }
          }
          cd ~/SmartPeak
          #mkdir superbuild
          mkdir smartpeak_build
          cd ~/SmartPeak/superbuild
          cmake -DUSE_SUPERBUILD=ON -DCMAKE_BUILD_TYPE=Release ~/SmartPeak
          cmake --build .
          cd ~/SmartPeak/smartpeak_build
          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_CXX_EXTENSIONS=OFF -DCXX_STANDARD_REQUIRED=ON -DEIGEN_USE_GPU=OFF -DUSE_SUPERBUILD=OFF -DBoost_NO_SYSTEM_PATHS=ON -DBOOST_USE_STATIC=ON -DBOOST_ROOT="C:\lib\boost\boost_1_73_0" -DBOOST_INCLUDE_DIR="C:\lib\boost\boost_1_73_0" -DBOOST_LIBRARYDIR="C:\lib\boost\boost_1_73_0\lib64-msvc-14.2" -DCMAKE_PREFIX_PATH="C:/Users/circleci/OpenMS/openms_build/;C:/lib/Qt/qt-5.12.9-dynamic-msvc2019-x86_64;C:/lib/sdl2/SDL2-2.0.12" -DEIGEN3_INCLUDE_DIR=C:/Users/circleci/OpenMS/contrib_build/include/eigen3 -DPLOG_INCLUDE_DIR=C:/Users/circleci/SmartPeak/superbuild/Dependencies/Source/plog/include -DIMGUI_DIR=C:/Users/circleci/SmartPeak/superbuild/Dependencies/Source/imgui -DIMPLOT_DIR=C:/Users/circleci/SmartPeak/superbuild/Dependencies/Source/implot -DCMAKE_BUILD_TYPE=Release ~/SmartPeak
          msbuild src/SmartPeak_src.sln /verbosity:normal /maxcpucount /p:Configuration=Release
          msbuild src/smartpeak/SmartPeak.sln /verbosity:normal /maxcpucount /p:Configuration=Release
          msbuild src/examples/SmartPeak_class_examples_smartpeak.sln /maxcpucount /property:Configuration=Release
          refreshenv
          & 'C:\Program Files\cmake\bin\ctest.exe' -VV -F
          & 'C:\Program Files\cmake\bin\cpack.exe' -G NSIS64
      - run:
          command: |
            mkdir -p ~/artifacts
            cp ~/SmartPeak/smartpeak_build/*.exe ~/artifacts
      - store_artifacts:
          path: ~/artifacts
            
  publish_release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: /tmp/artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=${CIRCLE_TAG}
            mkdir arts

            # Get all job numbers for this workflow:
            JOB_NUMBERS_CONTENT=$(curl --request GET \
              --url "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/job" \
              --header "Circle-Token: ${CIRCLE_TOKEN}" \
              --header 'content-type: application/json')
            JOB_NUMBERS=$(echo $JOB_NUMBERS_CONTENT | jq -r '.items[] | select (.type? == "build") | .job_number')
            echo $JOB_NUMBERS | tr " " "\n" > job_num.txt
            echo "Found job IDs in current workflow"
            cat job_num.txt

            # Get artifacts per each job:
            echo "Current job: ${CIRCLE_BUILD_NUM}"
            echo "Searching for Artifacts .........."
            for x in $JOB_NUMBERS ; do 
              if [[ "$x" == "$CIRCLE_BUILD_NUM" ]]; then
                continue
              fi
              ART_CONTENT=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/$x/artifacts" \
                --header "Circle-Token: ${CIRCLE_TOKEN}" \
                --header 'content-type: application/json') 
              echo $ART_CONTENT
              echo 
              ARTS=$(echo $ART_CONTENT | jq -r '.items[] | .url')
              echo "*** Artifacts For Job Number $x ***"
              echo $ARTS
              wget -P arts --verbose --header "Circle-Token: ${CIRCLE_TOKEN}" $ARTS
              echo 
            done

            echo "Push artifacts to github tag"
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} arts

workflows:
  version: 2.1
  build:
    jobs:
      - build_windows:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - publish_release:
          requires:
            - build_windows
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/