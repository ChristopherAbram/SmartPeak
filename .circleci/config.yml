version: 2.1

orbs:
  win: circleci/windows@2.4.0

# Fetch artifacts only for these jobs with not empty artifact list (now it fails)
# Create checkout command
# Retrieve changelog description for current release and push it to github release

jobs:
  build_ubuntu:
    docker:
      - image: ubuntu:20.04
    working_directory: ~/SmartPeak
    steps:
      - run:
          name: Checkout
          command: |
            git clone -b ${CIRCLE_BRANCH} https://github.com/ChristopherAbram/SmartPeak.git .
            git log -1 --oneline
      - run:
          name: Packing SmartPeak
          command: |
            apt-get update
            apt-get install -y curl
            curl http://manpages.ubuntu.com/manpages/trusty/man1/mktemp.1.html > SmartPeak-1.0.0-Linux.deb
            mkdir -p /tmp/packages
            cp SmartPeak-1.0.0-Linux.deb /tmp/packages
      - store_artifacts:
          path: /tmp/packages

  build_macos:
    docker:
      - image: ubuntu:20.04
    working_directory: ~/SmartPeak
    steps:
      - run:
          name: Checkout
          command: |
            git clone -b ${CIRCLE_BRANCH} https://github.com/ChristopherAbram/SmartPeak.git .
            git log -1 --oneline
      - run:
          name: Moving Package to artifacts folder
          command: |
            apt-get update
            apt-get install -y curl
            ls -la
            curl http://manpages.ubuntu.com/manpages/trusty/man1/mktemp.1.html > SmartPeak-1.0.0-Darwin.dmg
            mkdir -p /tmp/packages
            cp SmartPeak-1.0.0-Darwin.dmg /tmp/packages
      - store_artifacts:
          path: /tmp/packages

  build_windows:
    working_directory: ~/SmartPeak
    executor: win/default
    steps:
      - run:
          name: Checkout
          command: |
            git clone -b ${CIRCLE_BRANCH} https://github.com/ChristopherAbram/SmartPeak.git .
            git log -1 --oneline
      - run: systeminfo
      - run:
          name: Preparing Artifact
          command: |
            curl https://www.google.com > SmartPeak-1.0.0-win64.exe
            mkdir -p ~/artifacts
            cp SmartPeak-1.0.0-win64.exe ~/artifacts
      - store_artifacts:
          path: ~/artifacts

  prepare_release:
    working_directory: ~/SmartPeak
    docker:
      - image: python:3.7.0
    steps:
      - checkout
      - run:
          name: "Check prerequisites"
          command: |
            python --version
            pip install gitpython
      - run:
          name: "Update SmartPeak version"
          command: |
            echo "Branch name: ${CIRCLE_BRANCH}"
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            echo "Release tag: ${VERSION}"
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            
            smartpeak_prepare_release --set-version=${VERSION}
      - add_ssh_keys:
          fingerprints:
            - "20:a5:d1:16:81:c4:02:14:89:34:be:07:6a:d2:35:95"
      - run:
          name: "Push release branch"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            git config --global user.email "krzyja@biosustain.dtu.dk"
            git config --global user.name "ChristopherAbram"
            git status
            git commit -am "Release update (${VERSION}) [skip ci]"
            git push origin ${CIRCLE_BRANCH}
            
  publish_release:
    working_directory: ~/SmartPeak
    docker:
      - image: cibuilds/github:0.10
    steps:
      # - attach_workspace:
      #     at: /tmp/artifacts
      - run:
          name: "Retrieve artifacts"
          command: |
            mkdir arts

            # Get all job numbers for this workflow: 
            JOB_NUMBERS_CONTENT=$(curl --request GET \
              --url "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/job" \
              --header "Circle-Token: ${CIRCLE_TOKEN}" \
              --header 'content-type: application/json')
            JOB_NUMBERS=$(echo $JOB_NUMBERS_CONTENT | jq -r '.items[] | select (.type? == "build") | .job_number')
            echo $JOB_NUMBERS | tr " " "\n" > job_num.txt
            echo "Found job IDs in current workflow"
            cat job_num.txt

            # Get artifacts per each job:
            echo "Current job: ${CIRCLE_BUILD_NUM}"
            echo "Searching for Artifacts .........."
            for x in $JOB_NUMBERS ; do 
              if [[ "$x" == "$CIRCLE_BUILD_NUM" ]]; then
                continue
              fi
              echo "Get artifacts for job ${x}"
              ART_CONTENT=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/$x/artifacts" \
                --header "Circle-Token: ${CIRCLE_TOKEN}" \
                --header 'content-type: application/json') 
              echo $ART_CONTENT
              echo 
              ARTS=$(echo $ART_CONTENT | jq -r '.items[] | .url')
              # echo "*** Artifacts For Job Number $x ***"
              echo "Detected following url: $ARTS"
              if [ ! -z "$ARTS" ]; then 
                echo "Download from url: ${ARTS}"
                wget -P arts --verbose --header "Circle-Token: ${CIRCLE_TOKEN}" $ARTS
              else
                echo "Skip download for #${x}"
              fi
              echo 
            done
      - run:
          name: "Publish release to github"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} arts
      - run:
          name: "Auto-merge release branch"
          command: |
            echo "Merge"
            git --help

workflows:
  version: 2.1
  # ci:
  #   jobs:
  #     - build_ubuntu
  #     - build_macos
  #     - build_windows
  release:
    jobs:
      - prepare_release:
          filters:
            branches:
              only: /^release\/.*$/
      - build_ubuntu:
          requires:
            - prepare_release
      - build_macos:
          requires:
            - prepare_release
      - build_windows:
          requires:
            - prepare_release
      - publish_release:
          requires:
            - build_ubuntu
            - build_macos
            - build_windows