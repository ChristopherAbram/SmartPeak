version: 2.1

orbs:
  win: circleci/windows@2.4.0

jobs:
  build_ubuntu:
    docker:
      - image: ubuntu:20.04
    working_directory: ~/SmartPeak
    steps:
      - checkout
      - run:
          name: Packing SmartPeak
          command: |
            curl http://manpages.ubuntu.com/manpages/trusty/man1/mktemp.1.html > SmartPeak-1.0.0-Linux.deb
            mkdir -p /tmp/packages
            cp SmartPeak-1.0.0-Linux.deb /tmp/packages
      - store_artifacts:
          path: /tmp/packages

  build_macos:
    docker:
      - image: ubuntu:20.04
    working_directory: ~/SmartPeak
    steps:
      - checkout
      - run:
          name: Moving Package to artifacts folder
          command: |
            curl http://manpages.ubuntu.com/manpages/trusty/man1/mktemp.1.html > SmartPeak-1.0.0-Darwin.dmg
            mkdir -p /tmp/packages
            cp SmartPeak-1.0.0-Darwin.dmg /tmp/packages
      - store_artifacts:
          path: /tmp/packages

  build_windows:
    working_directory: ~/SmartPeak
    executor: win/default
    steps:
      - checkout
      - run: systeminfo
      - run:
          name: Preparing Artifact
          command: |
            curl https://www.google.com > SmartPeak-1.0.0-win64.exe
            mkdir -p ~/artifacts
            cp SmartPeak-1.0.0-win64.exe ~/artifacts
      - store_artifacts:
          path: ~/artifacts

  prepare_release:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: "Publish Release on GitHub"
          command: |
            echo "Branch name: ${CIRCLE_BRANCH}"
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            echo "Release tag: ${VERSION}"
            echo
            echo $PWD
            ls -la
            python --version
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            
            smartpeak_version
            
            
  publish_release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: /tmp/artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=${CIRCLE_TAG}
            mkdir arts

            # Get all job numbers for this workflow:
            JOB_NUMBERS_CONTENT=$(curl --request GET \
              --url "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/job" \
              --header "Circle-Token: ${CIRCLE_TOKEN}" \
              --header 'content-type: application/json')
            JOB_NUMBERS=$(echo $JOB_NUMBERS_CONTENT | jq -r '.items[] | select (.type? == "build") | .job_number')
            echo $JOB_NUMBERS | tr " " "\n" > job_num.txt
            echo "Found job IDs in current workflow"
            cat job_num.txt

            # Get artifacts per each job:
            echo "Current job: ${CIRCLE_BUILD_NUM}"
            echo "Searching for Artifacts .........."
            for x in $JOB_NUMBERS ; do 
              if [[ "$x" == "$CIRCLE_BUILD_NUM" ]]; then
                continue
              fi
              ART_CONTENT=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/$x/artifacts" \
                --header "Circle-Token: ${CIRCLE_TOKEN}" \
                --header 'content-type: application/json') 
              echo $ART_CONTENT
              echo 
              ARTS=$(echo $ART_CONTENT | jq -r '.items[] | .url')
              echo "*** Artifacts For Job Number $x ***"
              echo $ARTS
              wget -P arts --verbose --header "Circle-Token: ${CIRCLE_TOKEN}" $ARTS
              echo 
            done

            echo "Push artifacts to github tag"
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} arts

workflows:
  version: 2.1
  # ci:
  #   jobs:
  #     - build_ubuntu
  #     - build_macos
  #     - build_windows
  release:
    jobs:
      - prepare_release:
          filters:
            branches:
              only: /^release\/.*$/
      # - build_ubuntu:
      #     filters:
      #       branches:
      #         only: /^release\\/.*$/
      # - publish_release:
      #     requires:
      #       - build_ubuntu
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         ignore: /.*/