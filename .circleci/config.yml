version: 2.1

orbs:
  win: circleci/windows@2.4.0
  slack: circleci/slack@4.3.0

# Create checkout command (after push from another jobs pulls previous commit ...) or pull only on release

jobs:
  build_ubuntu:
    docker:
      - image: ubuntu:20.04
    working_directory: ~/SmartPeak
    steps:
      - checkout
      - run:
          name: Prerequisites
          command: |
            apt-get update
            apt-get install -y curl git
      - run:
          name: "Pull latest"
          command: |
            # CircleCI doesn't support regex for conditional steps...
            if [[ << pipeline.git.branch >> =~ ^release\/.* ]]; then
                git checkout << pipeline.git.branch >>
                git pull origin << pipeline.git.branch >>
                git log -1 --oneline
            else
              echo "Skip this run step"
            fi
      - run:
          name: Packing SmartPeak
          command: |
            curl http://manpages.ubuntu.com/manpages/trusty/man1/mktemp.1.html > SmartPeak-1.0.0-Linux.deb
            mkdir -p /tmp/packages
            cp SmartPeak-1.0.0-Linux.deb /tmp/packages
      - store_artifacts:
          path: /tmp/packages

  build_macos:
    docker:
      - image: ubuntu:20.04
    working_directory: ~/SmartPeak
    steps:
      - checkout
      - run:
          name: Prerequisites
          command: |
            apt-get update
            apt-get install -y curl git
      - run:
          name: "Pull latest"
          command: |
            # CircleCI doesn't support regex for conditional steps...
            if [[ << pipeline.git.branch >> =~ ^release\/.* ]]; then
                git checkout << pipeline.git.branch >>
                git pull origin << pipeline.git.branch >>
                git log -1 --oneline
            else
              echo "Skip this run step"
            fi
      - run:
          name: Moving Package to artifacts folder
          command: |
            ls -la
            curl http://manpages.ubuntu.com/manpages/trusty/man1/mktemp.1.html > SmartPeak-1.0.0-Darwin.dmg
            mkdir -p /tmp/packages
            cp SmartPeak-1.0.0-Darwin.dmg /tmp/packages
      - store_artifacts:
          path: /tmp/packages

  build_windows:
    working_directory: ~/SmartPeak
    executor: win/default
    steps:
      - checkout
      - run:
          name: "Pull latest"
          command: |
            if ("<< pipeline.git.branch >>" -match '^release/.*$') {
              git checkout << pipeline.git.branch >>
              git pull origin << pipeline.git.branch >>
              git log -1 --oneline
            } else {
              Write-Output "Skip this run step"
            }
      - run: systeminfo
      - run:
          name: Preparing Artifact
          command: |
            curl https://www.google.com > SmartPeak-1.0.0-win64.exe
            mkdir -p ~/artifacts
            cp SmartPeak-1.0.0-win64.exe ~/artifacts
      - store_artifacts:
          path: ~/artifacts

  prepare_release:
    working_directory: ~/SmartPeak
    docker:
      - image: python:3.7.0
    steps:
      - checkout
      - run:
          name: "Check prerequisites"
          command: |
            python --version
            pip install gitpython
      - run:
          name: "Update SmartPeak version"
          command: |
            echo "Branch name: ${CIRCLE_BRANCH}"
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            echo "Release tag: ${VERSION}"
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            smartpeak_prepare_release --set-version=${VERSION}
      - add_ssh_keys:
          fingerprints:
            - "83:59:00:aa:ed:0a:96:76:d5:27:54:79:37:8c:f8:94"
      - run:
          name: "Push release branch"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            git config --global user.email "krzyja@biosustain.dtu.dk"
            git config --global user.name "ChristopherAbram"
            git status
            git commit -am "Release update (${VERSION}) [skip ci]"
            git push origin ${CIRCLE_BRANCH}
            
  publish_release:
    working_directory: ~/SmartPeak
    docker:
      - image: python:3.7.0
    steps:
      - checkout
      - run:
          name: "Install prerequisites"
          command: |
            apt-get update
            apt-get install -y curl wget jq
            pip install gitpython
            GHR_VERSION=0.13.0
            GHR_URL=https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            wget "$GHR_URL" && \
              tar xzf ghr_v${GHR_VERSION}_linux_amd64.tar.gz && \
              mv ghr_v${GHR_VERSION}_linux_amd64/ghr /usr/bin/ghr && \
              rm -r ghr_v${GHR_VERSION}_linux_amd64.tar.gz ghr_v${GHR_VERSION}_linux_amd64/
      - run:
          name: "Retrieve artifacts"
          command: |
            mkdir arts

            # Get all job numbers for this workflow: 
            JOB_NUMBERS_CONTENT=$(curl --request GET \
              --url "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/job" \
              --header "Circle-Token: ${CIRCLE_TOKEN}" \
              --header 'content-type: application/json')
            JOB_NUMBERS=$(echo $JOB_NUMBERS_CONTENT | jq -r '.items[] | select (.type? == "build") | .job_number')
            echo $JOB_NUMBERS | tr " " "\n" > job_num.txt
            echo "Found job IDs in current workflow"
            cat job_num.txt

            # Get artifacts per each job:
            echo "Current job: ${CIRCLE_BUILD_NUM}"
            echo "Searching for Artifacts .........."
            for x in $JOB_NUMBERS ; do 
              if [[ "$x" == "$CIRCLE_BUILD_NUM" ]]; then
                continue
              fi
              echo "Get artifacts for job ${x}"
              ART_CONTENT=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/$x/artifacts" \
                --header "Circle-Token: ${CIRCLE_TOKEN}" \
                --header 'content-type: application/json') 
              echo $ART_CONTENT
              echo 
              ARTS=$(echo $ART_CONTENT | jq -r '.items[] | .url')
              # echo "*** Artifacts For Job Number $x ***"
              echo "Detected following url: $ARTS"
              if [ ! -z "$ARTS" ]; then 
                echo "Download from url: ${ARTS}"
                wget -P arts --verbose --header "Circle-Token: ${CIRCLE_TOKEN}" $ARTS
              else
                echo "Skip download for #${x}"
              fi
              echo 
            done
      - add_ssh_keys:
          fingerprints:
            - "83:59:00:aa:ed:0a:96:76:d5:27:54:79:37:8c:f8:94"
      - run:
          name: "Auto-merge release branch"
          command: |
            git config --global user.email "krzyja@biosustain.dtu.dk"
            git config --global user.name "ChristopherAbram"
            git checkout ${CIRCLE_BRANCH}
            git pull origin ${CIRCLE_BRANCH}
            git checkout develop
            git branch
            git merge ${CIRCLE_BRANCH} --no-edit
            git push origin develop
      - run:
          name: "Publish release to github"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            echo "export SMARTPEAK_VERSION=$VERSION" >> $BASH_ENV
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            RELEASE_BODY=$(smartpeak_changes)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c develop -b "${RELEASE_BODY}" -delete "v${VERSION}" arts
            
      - run:
          name: "Notify users"
          command: |
            pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib markdown
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"

            # Prepare authentication with Gmail API
            echo $GMAIL_TOKEN_PICKLE | base64 --decode > token.pickle

            # Send emails:
            smartpeak_send_emails --version=${VERSION}
      # - slack/notify:
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "divider"
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*SmartPeak v${SMARTPEAK_VERSION}* released\n\nhttps://github.com/ChristopherAbram/SmartPeak/releases/tag/v${SMARTPEAK_VERSION}"
      #             }
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "Download from GitHub",
      #                   "emoji": true
      #                 },
      #                 "value": "release",
      #                 "url": "https://github.com/ChristopherAbram/SmartPeak/releases/tag/v${SMARTPEAK_VERSION}",
      #                 "action_id": "actionId-0"
      #               }
      #             ]
      #           }
      #         ]
      #       }
      #     event: always

  trigger_release:
    working_directory: ~/SmartPeak
    docker:
      - image: python:3.7.0
    steps:
      - checkout
      - run:
          name: "Install prerequisites"
          command: |
            apt-get update
            pip install gitpython
      - add_ssh_keys:
          fingerprints:
            - "83:59:00:aa:ed:0a:96:76:d5:27:54:79:37:8c:f8:94"
      - run:
          name: "Verify commit"
          command: |
            # Parse latest commit message:
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            RELEASE_AVAILABLE=$(smartpeak_git_release_available)
            # If smartpeak_git_release_available outputs anything, there is a valid release string included
            if [ ! -z "${RELEASE_AVAILABLE}" ]; then
              # Retrieve version:  
              split=(${RELEASE_AVAILABLE})
              VERSION=${split[2]}
              # Push release branch:
              git config --global user.email "krzyja@biosustain.dtu.dk"
              git config --global user.name "ChristopherAbram"
              git checkout -b release/${VERSION}
              git push origin release/${VERSION}
              echo "The new branch release/${VERSION} pushed!"
            else
              echo "No release command detected. Exit."
            fi

workflows:
  version: 2.1
  ci:
    jobs:
      - build_ubuntu:
          filters:
            branches:
              ignore: /^release\/.*$/
      - build_macos:
          filters:
            branches:
              ignore: /^release\/.*$/
      - build_windows:
          filters:
            branches:
              ignore: /^release\/.*$/
  release_check:
    jobs:
      - trigger_release:
          filters:
            branches:
              only: develop
  release:
    jobs:
      - prepare_release:
          filters:
            branches:
              only: /^release\/.*$/
      - build_ubuntu:
          requires:
            - prepare_release
      - build_macos:
          requires:
            - prepare_release
      - build_windows:
          requires:
            - prepare_release
      - publish_release:
          requires:
            - build_ubuntu
            - build_macos
            - build_windows
          context:
            - smartpeak-slack